//
//  DetailScreenViewController.swift
//  L-Tech-test
//
//  Created by Рамил Гаджиев on 20.10.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DetailScreenDisplayLogic: AnyObject {
    func displayDetailScreen(viewModel: DetailScreen.ShowDetails.ViewModel)
}


class DetailScreenViewController: UIViewController {
        
    var interactor: DetailScreenBusinessLogic?
    var router: (NSObjectProtocol & DetailScreenRoutingLogic & DetailScreenDataPassing)?
    
    var image: UIImageView = {
        var imageView = UIImageView()
        imageView.image = UIImage(named: "noImage")
        imageView.contentMode = .scaleAspectFit
        imageView.clipsToBounds = true
        imageView.translatesAutoresizingMaskIntoConstraints = false
        return imageView
    }()

    var titleLabel = UILabel(text: "title", size: 22)
    var textLabel = UILabel(text: "text")
    
    
    
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
        interactor?.provideDetailScreen()
    }
    
    
    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = DetailScreenInteractor()
        let presenter = DetailScreenPresenter()
        let router = DetailScreenRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
}

extension DetailScreenViewController: DetailScreenDisplayLogic {
    func displayDetailScreen(viewModel: DetailScreen.ShowDetails.ViewModel) {
        DispatchQueue.main.async {
            self.titleLabel.text = viewModel.modelTitle
            self.textLabel.text = viewModel.modelText
            self.image.image = UIImage(data: viewModel.imageData)
        }
       
    }
}


// MARK: SetupUI
extension DetailScreenViewController {
    
    private func setupUI() {
        
        view.backgroundColor = .white
        view.addSubview(image)
        view.addSubview(titleLabel)
        view.addSubview(textLabel)
        
        titleLabel.translatesAutoresizingMaskIntoConstraints = false
        textLabel.translatesAutoresizingMaskIntoConstraints = false

        NSLayoutConstraint.activate([
            image.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: 60),
            image.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            image.widthAnchor.constraint(equalTo: view.widthAnchor, multiplier: 0.7),
            image.heightAnchor.constraint(equalTo: image.widthAnchor),


            titleLabel.topAnchor.constraint(equalTo: image.bottomAnchor, constant: 50),
            titleLabel.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 30),
            titleLabel.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -30),

            textLabel.topAnchor.constraint(equalTo: titleLabel.bottomAnchor, constant: 30),
            textLabel.leadingAnchor.constraint(equalTo: titleLabel.leadingAnchor),
            textLabel.trailingAnchor.constraint(equalTo: titleLabel.trailingAnchor)
            
        ])
    }
}
